#.2054. Two Best Non-Overlapping Events
import java.util.*;

class Solution {
    public int maxTwoEvents(int[][] events) {
        // Sort events by their end time
        Arrays.sort(events, (a, b) -> Integer.compare(a[1], b[1]));

        int n = events.length;
        int[] maxValues = new int[n];
        int maxSum = 0;

        // Track the maximum value seen so far
        maxValues[0] = events[0][2];
        for (int i = 1; i < n; i++) {
            maxValues[i] = Math.max(maxValues[i - 1], events[i][2]);
        }

        for (int i = 0; i < n; i++) {
            // Maximum value if we only pick this event
            maxSum = Math.max(maxSum, events[i][2]);

            // Binary search for the last non-overlapping event
            int low = 0, high = i - 1, idx = -1;
            while (low <= high) {
                int mid = low + (high - low) / 2;
                if (events[mid][1] < events[i][0]) {
                    idx = mid;
                    low = mid + 1;
                } else {
                    high = mid - 1;
                }
            }

            // If there is a non-overlapping event, calculate the max sum
            if (idx != -1) {
                maxSum = Math.max(maxSum, events[i][2] + maxValues[idx]);
            }
        }

        return maxSum;
    }
}
