#.2471. Minimum Number of Operations to Sort a Binary Tree by Level.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */


class Solution {
    public int minimumOperations(TreeNode root) {
        if (root == null) return 0;

        // Level-order traversal to gather nodes by level
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);

        int totalSwaps = 0;

        while (!queue.isEmpty()) {
            int size = queue.size();
            List<Integer> levelValues = new ArrayList<>();

            // Gather all values at the current level
            for (int i = 0; i < size; i++) {
                TreeNode currentNode = queue.poll();
                levelValues.add(currentNode.val);

                if (currentNode.left != null) queue.add(currentNode.left);
                if (currentNode.right != null) queue.add(currentNode.right);
            }

            // Calculate minimum swaps needed to sort the level
            totalSwaps += calculateMinSwaps(levelValues);
        }

        return totalSwaps;
    }

    private int calculateMinSwaps(List<Integer> values) {
        int n = values.size();
        int[] arr = new int[n];

        // Copy values and sort with indices
        for (int i = 0; i < n; i++) {
            arr[i] = values.get(i);
        }
        int[][] indexedArr = new int[n][2];
        for (int i = 0; i < n; i++) {
            indexedArr[i][0] = arr[i];
            indexedArr[i][1] = i;
        }

        Arrays.sort(indexedArr, Comparator.comparingInt(a -> a[0]));

        // Find the minimum swaps using the cycle detection technique
        boolean[] visited = new boolean[n];
        int swaps = 0;

        for (int i = 0; i < n; i++) {
            if (visited[i] || indexedArr[i][1] == i) {
                continue;
            }

            int cycleSize = 0;
            int j = i;

            while (!visited[j]) {
                visited[j] = true;
                j = indexedArr[j][1];
                cycleSize++;
            }

            if (cycleSize > 1) {
                swaps += cycleSize - 1;
            }
        }

        return swaps;
    }
}
