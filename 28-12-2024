#.689. Maximum Sum of 3 Non-Overlapping Subarrays.


class Solution {
    public int[] maxSumOfThreeSubarrays(int[] nums, int k) {
        int n = nums.length;
        int[] result = new int[3];
        
        // Step 1: Compute sliding window sums
        int[] sum = new int[n - k + 1];
        int windowSum = 0;
        for (int i = 0; i < nums.length; i++) {
            windowSum += nums[i];
            if (i >= k) windowSum -= nums[i - k];
            if (i >= k - 1) sum[i - k + 1] = windowSum;
        }
        
        // Step 2: Calculate the best left index dynamically
        int bestLeft = 0;
        int[] bestLeftAt = new int[n - k + 1];
        for (int i = 0; i < sum.length; i++) {
            if (sum[i] > sum[bestLeft]) bestLeft = i;
            bestLeftAt[i] = bestLeft;
        }
        
        // Step 3: Calculate the best right index dynamically
        int bestRight = sum.length - 1;
        int[] bestRightAt = new int[n - k + 1];
        for (int i = sum.length - 1; i >= 0; i--) {
            if (sum[i] >= sum[bestRight]) bestRight = i;
            bestRightAt[i] = bestRight;
        }
        
        // Step 4: Iterate for the middle subarray
        int maxSum = 0;
        for (int mid = k; mid < sum.length - k; mid++) {
            int l = bestLeftAt[mid - k];
            int r = bestRightAt[mid + k];
            int totalSum = sum[l] + sum[mid] + sum[r];
            if (totalSum > maxSum) {
                maxSum = totalSum;
                result[0] = l;
                result[1] = mid;
                result[2] = r;
            }
        }
        
        return result;
    }
}
