#.983. Minimum Cost For Tickets.

class Solution {
    public int mincostTickets(int[] days, int[] costs) {
        int n = days.length;
        int[] dp = new int[n]; // DP array for the number of travel days only
        dp[0] = Math.min(costs[0], Math.min(costs[1], costs[2])); // Minimum cost for the first travel day

        for (int i = 1; i < n; i++) {
            // 1-day pass
            int cost1 = dp[i - 1] + costs[0];

            // 7-day pass
            int j = i;
            while (j > 0 && days[i] - days[j - 1] < 7) {
                j--;
            }
            int cost7 = (j > 0 ? dp[j - 1] : 0) + costs[1];

            // 30-day pass
            j = i;
            while (j > 0 && days[i] - days[j - 1] < 30) {
                j--;
            }
            int cost30 = (j > 0 ? dp[j - 1] : 0) + costs[2];

            dp[i] = Math.min(cost1, Math.min(cost7, cost30));
        }

        return dp[n - 1];
    }
}
